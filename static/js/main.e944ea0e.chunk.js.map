{"version":3,"sources":["reportWebVitals.js","features/employees/employees.slices.js","utils/store.js","Components/BottomNavigation.jsx","Components/TopNavigation.jsx","Components/EmployeesTable.jsx","utils/data.js","Pages/EmployeesList/index.jsx","Components/Header.jsx","utils/functions/generateFormChildren.js","utils/functions/handleInputsErrorMessage.js","utils/functions/handleFormValidation.js","utils/functions/returnArrayOfFormInputs.js","utils/functions/handleSubmit.js","Components/Modal.jsx","Components/CreateEmployeeForm.jsx","Pages/Home/index.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","toRemoveWhenProjectDone","firstName","lastName","dateOfBirth","startDate","street","city","state","zipCode","department","employeesSlice","createSlice","name","initialState","reducers","addEmployee","action","push","payload","actions","reducer","configureStore","employees","employeesReducer","BottomNavigation","props","rows","previousPage","nextPage","canPreviousPage","canNextPage","pageIndex","pageSize","entriesStart","entriesEnd","className","length","onClick","disabled","TopNavigation","setPageSize","preGlobalFilteredRows","globalFilter","setGlobalFilter","useAsyncDebounce","count","useState","value","setValue","onChange","undefined","e","Number","target","map","placeholder","EmployeesTable","data","columns","useTable","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","id","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","DEPARTMENTS","EMPLOYEES_COLUMNS","Header","accessor","STATES","abbreviation","EmployeeList","loading","useSelector","useMemo","console","log","to","generateFormChildren","formChildrenArray","child","element","Fragment","htmlFor","type","selected","maxDate","childrenInputs","options","option","optionValue","handleInputsErrorMessage","condition","input","errorMessage","errorMessageElement","document","getElementById","setCustomValidity","remove","DOMParser","parseFromString","body","firstChild","after","handleFormValidation","formInputsArray","a","parseInt","includes","filter","test","alert","returnArrayOfFormInputs","lastElementIndex","elements","currentArray","handleSubmit","preventDefault","formLastInputIndex","forms","formElements","rawInputsArray","tagName","setAttribute","Modal","removeAttribute","CreateEmployeeForm","setDateOfBirth","setStartDate","dispatch","useDispatch","formChildren","date","subYears","Date","newEmployee","employeesActions","Home","ReactDOM","StrictMode","store","path"],"mappings":"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","file":"static/js/main.e944ea0e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n/**\r\n * An objet storing all information about an employee\r\n * @typedef {object} employee\r\n * @property  {string} firstName\r\n * @property  {string} lastName\r\n * @property  {string} dateOfBirth\r\n * @property  {string} startDate\r\n * @property  {object} address\r\n * @property  {string} address.street\r\n * @property  {string} address.city\r\n * @property  {string} address.state\r\n * @property  {string} address.zip\r\n * @property  {string} department\r\n */\r\n\r\n/**\r\n * create a slice for employees (see {@link https://redux-toolkit.js.org/api/createslice @reduxjs/toolkit})\r\n * @module employeesSlice\r\n */\r\n\r\nconst toRemoveWhenProjectDone = {\r\n  firstName: \"Benjamin\",\r\n  lastName: \"Lesne\",\r\n  dateOfBirth: \"07-08-1990\",\r\n  startDate: \"08-08-1990\",\r\n  street: \"antoine de jussieu\",\r\n  city: \"Saint nazaire\",\r\n  state: \"France\",\r\n  zipCode: 2,\r\n  department: \"Sale\",\r\n};\r\n\r\nconst employeesSlice = createSlice({\r\n  name: \"employees\",\r\n  initialState: [\r\n    toRemoveWhenProjectDone,\r\n    toRemoveWhenProjectDone,\r\n    toRemoveWhenProjectDone,\r\n  ],\r\n  reducers: {\r\n    /**\r\n     * This is an action that add an employee to global redux state\r\n     * @function addEmployee\r\n     * @param {employee} action.payload\r\n     */\r\n    addEmployee(state, action) {\r\n      state.push(action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = employeesSlice;\r\n\r\nexport const { addEmployee } = actions;\r\nexport default reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport employeesReducer from \"../features/employees/employees.slices\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    employees: employeesReducer,\r\n  },\r\n});\r\n","import \"../styles/BottomNavigation.css\";\r\n\r\nconst BottomNavigation = (props) => {\r\n  const {\r\n    rows,\r\n    previousPage,\r\n    nextPage,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageIndex,\r\n    pageSize,\r\n  } = props;\r\n\r\n  let entriesStart = pageSize * pageIndex;\r\n  let entriesEnd = entriesStart + pageSize;\r\n\r\n  return (\r\n    <div className=\"BottomNavigation\">\r\n      <div className=\"BottomNavigation__showing-x-to-y-of-z-entries\">\r\n        <p>\r\n          Showing {entriesStart} to {entriesEnd} of {rows.length} entries\r\n        </p>\r\n      </div>\r\n      <div className=\"BottomNavigation__buttons-wrapper\">\r\n        <button\r\n          className=\"BottomNavigation__buttons\"\r\n          onClick={() => previousPage()}\r\n          disabled={!canPreviousPage}\r\n        >\r\n          Previous\r\n        </button>\r\n        <button\r\n          className=\"BottomNavigation__buttons\"\r\n          onClick={() => nextPage()}\r\n          disabled={!canNextPage}\r\n        >\r\n          Next{\" \"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BottomNavigation;\r\n","import \"../styles/TopNavigation.css\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst TopNavigation = (props) => {\r\n  const {\r\n    pageSize,\r\n    setPageSize,\r\n    preGlobalFilteredRows,\r\n    globalFilter,\r\n    setGlobalFilter,\r\n    useAsyncDebounce,\r\n  } = props;\r\n\r\n  const count = preGlobalFilteredRows.length;\r\n  const [value, setValue] = useState(globalFilter);\r\n  const onChange = useAsyncDebounce((value) => {\r\n    setGlobalFilter(value || undefined);\r\n  }, 200);\r\n\r\n  return (\r\n    <div className=\"TopNavigation\">\r\n      <div className=\"TopNavigation__select-number-of-entries-wrapper\">\r\n        <span>Show</span>\r\n        <select\r\n          value={pageSize}\r\n          onChange={(e) => {\r\n            setPageSize(Number(e.target.value));\r\n          }}\r\n        >\r\n          {[10, 25, 50, 100].map((pageSize) => (\r\n            <option key={pageSize} value={pageSize}>\r\n              {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <span>entries</span>\r\n      </div>\r\n      <div className=\"TopNavigation__search-bar-wrapper\">\r\n        <label>Search:</label>\r\n        <input\r\n          className=\"TopNavigation__search-bar\"\r\n          value={value || \"\"}\r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n            onChange(e.target.value);\r\n          }}\r\n          placeholder={`${count} records...`}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopNavigation;\r\n","import \"../styles/EmployeesTable.css\";\r\nimport React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  useTable,\r\n  usePagination,\r\n  useGlobalFilter,\r\n  useAsyncDebounce,\r\n  useSortBy,\r\n} from \"react-table\";\r\n\r\nimport BottomNavigation from \"./BottomNavigation\";\r\nimport TopNavigation from \"./TopNavigation\";\r\n\r\n/**\r\n * return all employees in a table made with {@link React-table https://react-table.tanstack.com/docs/overview}\r\n * @module EmployeesTable\r\n */\r\n\r\nconst EmployeesTable = ({ data, columns }) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    rows,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize, globalFilter },\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n  } = useTable({ columns, data }, useGlobalFilter, useSortBy, usePagination);\r\n\r\n  return (\r\n    <div className=\"EmployeesTable-wrapper\">\r\n      <TopNavigation\r\n        pageSize={pageSize}\r\n        setPageSize={setPageSize}\r\n        preGlobalFilteredRows={preGlobalFilteredRows}\r\n        globalFilter={globalFilter}\r\n        setGlobalFilter={setGlobalFilter}\r\n        useAsyncDebounce={useAsyncDebounce}\r\n      />\r\n      <table\r\n        {...getTableProps()}\r\n        id=\"employee-table\"\r\n        className=\"EmployeesTable\"\r\n      >\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  className=\"EmployeesTable__header\"\r\n                >\r\n                  {column.render(\"Header\")}\r\n                  <span>\r\n                    {column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \" 🔽\"\r\n                        : \" 🔼\"\r\n                      : \"\"}\r\n                  </span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td\r\n                      {...cell.getCellProps()}\r\n                      className=\"EmployeesTable__cell\"\r\n                    >\r\n                      {cell.render(\"Cell\")}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <BottomNavigation\r\n        rows={rows}\r\n        previousPage={previousPage}\r\n        nextPage={nextPage}\r\n        canPreviousPage={canPreviousPage}\r\n        canNextPage={canNextPage}\r\n        pageIndex={pageIndex}\r\n        pageSize={pageSize}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nEmployeesTable.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      firstName: PropTypes.string.isRequired,\r\n      lastName: PropTypes.string.isRequired,\r\n      dateOfBirth: PropTypes.string.isRequired,\r\n      startDate: PropTypes.string.isRequired,\r\n      street: PropTypes.string.isRequired,\r\n      city: PropTypes.string.isRequired,\r\n      state: PropTypes.string.isRequired,\r\n      zipCode: PropTypes.number.isRequired,\r\n      department: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  columns: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      Header: PropTypes.string.isRequired,\r\n      accessor: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default EmployeesTable;\r\n","export const DEPARTMENTS = [\r\n  \"Sales\",\r\n  \"Marketing\",\r\n  \"Engineering\",\r\n  \"Human Ressources\",\r\n  \"Legal\",\r\n];\r\n\r\nexport const EMPLOYEES_COLUMNS = [\r\n  {\r\n    Header: \"First Name\",\r\n    accessor: \"firstName\",\r\n  },\r\n  {\r\n    Header: \"Last Name\",\r\n    accessor: \"lastName\",\r\n  },\r\n  {\r\n    Header: \"Start Date\",\r\n    accessor: \"startDate\",\r\n  },\r\n  {\r\n    Header: \"Department\",\r\n    accessor: \"department\",\r\n  },\r\n  {\r\n    Header: \"Date of Birth\",\r\n    accessor: \"dateOfBirth\",\r\n  },\r\n  {\r\n    Header: \"Street\",\r\n    accessor: \"street\",\r\n  },\r\n  {\r\n    Header: \"City\",\r\n    accessor: \"city\",\r\n  },\r\n  {\r\n    Header: \"State\",\r\n    accessor: \"state\",\r\n  },\r\n  {\r\n    Header: \"Zip Code\",\r\n    accessor: \"zipCode\",\r\n  },\r\n];\r\n\r\nexport const STATES = [\r\n  {\r\n    name: \"Alabama\",\r\n    abbreviation: \"AL\",\r\n  },\r\n  {\r\n    name: \"Alaska\",\r\n    abbreviation: \"AK\",\r\n  },\r\n  {\r\n    name: \"American Samoa\",\r\n    abbreviation: \"AS\",\r\n  },\r\n  {\r\n    name: \"Arizona\",\r\n    abbreviation: \"AZ\",\r\n  },\r\n  {\r\n    name: \"Arkansas\",\r\n    abbreviation: \"AR\",\r\n  },\r\n  {\r\n    name: \"California\",\r\n    abbreviation: \"CA\",\r\n  },\r\n  {\r\n    name: \"Colorado\",\r\n    abbreviation: \"CO\",\r\n  },\r\n  {\r\n    name: \"Connecticut\",\r\n    abbreviation: \"CT\",\r\n  },\r\n  {\r\n    name: \"Delaware\",\r\n    abbreviation: \"DE\",\r\n  },\r\n  {\r\n    name: \"District Of Columbia\",\r\n    abbreviation: \"DC\",\r\n  },\r\n  {\r\n    name: \"Federated States Of Micronesia\",\r\n    abbreviation: \"FM\",\r\n  },\r\n  {\r\n    name: \"Florida\",\r\n    abbreviation: \"FL\",\r\n  },\r\n  {\r\n    name: \"Georgia\",\r\n    abbreviation: \"GA\",\r\n  },\r\n  {\r\n    name: \"Guam\",\r\n    abbreviation: \"GU\",\r\n  },\r\n  {\r\n    name: \"Hawaii\",\r\n    abbreviation: \"HI\",\r\n  },\r\n  {\r\n    name: \"Idaho\",\r\n    abbreviation: \"ID\",\r\n  },\r\n  {\r\n    name: \"Illinois\",\r\n    abbreviation: \"IL\",\r\n  },\r\n  {\r\n    name: \"Indiana\",\r\n    abbreviation: \"IN\",\r\n  },\r\n  {\r\n    name: \"Iowa\",\r\n    abbreviation: \"IA\",\r\n  },\r\n  {\r\n    name: \"Kansas\",\r\n    abbreviation: \"KS\",\r\n  },\r\n  {\r\n    name: \"Kentucky\",\r\n    abbreviation: \"KY\",\r\n  },\r\n  {\r\n    name: \"Louisiana\",\r\n    abbreviation: \"LA\",\r\n  },\r\n  {\r\n    name: \"Maine\",\r\n    abbreviation: \"ME\",\r\n  },\r\n  {\r\n    name: \"Marshall Islands\",\r\n    abbreviation: \"MH\",\r\n  },\r\n  {\r\n    name: \"Maryland\",\r\n    abbreviation: \"MD\",\r\n  },\r\n  {\r\n    name: \"Massachusetts\",\r\n    abbreviation: \"MA\",\r\n  },\r\n  {\r\n    name: \"Michigan\",\r\n    abbreviation: \"MI\",\r\n  },\r\n  {\r\n    name: \"Minnesota\",\r\n    abbreviation: \"MN\",\r\n  },\r\n  {\r\n    name: \"Mississippi\",\r\n    abbreviation: \"MS\",\r\n  },\r\n  {\r\n    name: \"Missouri\",\r\n    abbreviation: \"MO\",\r\n  },\r\n  {\r\n    name: \"Montana\",\r\n    abbreviation: \"MT\",\r\n  },\r\n  {\r\n    name: \"Nebraska\",\r\n    abbreviation: \"NE\",\r\n  },\r\n  {\r\n    name: \"Nevada\",\r\n    abbreviation: \"NV\",\r\n  },\r\n  {\r\n    name: \"New Hampshire\",\r\n    abbreviation: \"NH\",\r\n  },\r\n  {\r\n    name: \"New Jersey\",\r\n    abbreviation: \"NJ\",\r\n  },\r\n  {\r\n    name: \"New Mexico\",\r\n    abbreviation: \"NM\",\r\n  },\r\n  {\r\n    name: \"New York\",\r\n    abbreviation: \"NY\",\r\n  },\r\n  {\r\n    name: \"North Carolina\",\r\n    abbreviation: \"NC\",\r\n  },\r\n  {\r\n    name: \"North Dakota\",\r\n    abbreviation: \"ND\",\r\n  },\r\n  {\r\n    name: \"Northern Mariana Islands\",\r\n    abbreviation: \"MP\",\r\n  },\r\n  {\r\n    name: \"Ohio\",\r\n    abbreviation: \"OH\",\r\n  },\r\n  {\r\n    name: \"Oklahoma\",\r\n    abbreviation: \"OK\",\r\n  },\r\n  {\r\n    name: \"Oregon\",\r\n    abbreviation: \"OR\",\r\n  },\r\n  {\r\n    name: \"Palau\",\r\n    abbreviation: \"PW\",\r\n  },\r\n  {\r\n    name: \"Pennsylvania\",\r\n    abbreviation: \"PA\",\r\n  },\r\n  {\r\n    name: \"Puerto Rico\",\r\n    abbreviation: \"PR\",\r\n  },\r\n  {\r\n    name: \"Rhode Island\",\r\n    abbreviation: \"RI\",\r\n  },\r\n  {\r\n    name: \"South Carolina\",\r\n    abbreviation: \"SC\",\r\n  },\r\n  {\r\n    name: \"South Dakota\",\r\n    abbreviation: \"SD\",\r\n  },\r\n  {\r\n    name: \"Tennessee\",\r\n    abbreviation: \"TN\",\r\n  },\r\n  {\r\n    name: \"Texas\",\r\n    abbreviation: \"TX\",\r\n  },\r\n  {\r\n    name: \"Utah\",\r\n    abbreviation: \"UT\",\r\n  },\r\n  {\r\n    name: \"Vermont\",\r\n    abbreviation: \"VT\",\r\n  },\r\n  {\r\n    name: \"Virgin Islands\",\r\n    abbreviation: \"VI\",\r\n  },\r\n  {\r\n    name: \"Virginia\",\r\n    abbreviation: \"VA\",\r\n  },\r\n  {\r\n    name: \"Washington\",\r\n    abbreviation: \"WA\",\r\n  },\r\n  {\r\n    name: \"West Virginia\",\r\n    abbreviation: \"WV\",\r\n  },\r\n  {\r\n    name: \"Wisconsin\",\r\n    abbreviation: \"WI\",\r\n  },\r\n  {\r\n    name: \"Wyoming\",\r\n    abbreviation: \"WY\",\r\n  },\r\n];\r\n","import { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useState, useMemo } from \"react\";\r\n\r\nimport EmployeesTable from \"../../Components/EmployeesTable\";\r\nimport { EMPLOYEES_COLUMNS } from \"../../utils/data.js\";\r\n\r\nconst EmployeeList = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const employees = useSelector((state) => state.employees);\r\n\r\n  const columns = useMemo(() => EMPLOYEES_COLUMNS, []);\r\n  const data = useMemo(() => employees, [employees]);\r\n\r\n  return (\r\n    <div id=\"employee-div\" className=\"container\">\r\n      <h1>Current Employees</h1>\r\n      <button onClick={() => console.log(employees)}>\r\n        Cliquez bande de salope\r\n      </button>\r\n      {loading ? (\r\n        <div>Loading...</div>\r\n      ) : (\r\n        <EmployeesTable data={data} columns={columns} />\r\n      )}\r\n\r\n      <Link to=\"/\">Home</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n","import \"../styles/Header.css\";\r\n\r\n/**\r\n * A simple header with a title inside\r\n * @module Header\r\n *\r\n */\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"title\">\r\n      <h1>HRnet</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n/**\r\n * return children input JSX from an array of objects describing each child\r\n * @function generateFormChildren\r\n * @param {Array.<Object>} formChildrenArray - array full of object each of them reprente a form input child element\r\n */\r\nconst generateFormChildren = (formChildrenArray) => {\r\n  return formChildrenArray.map((child) => {\r\n    switch (child.element) {\r\n      case \"input\":\r\n        return (\r\n          <React.Fragment key={child.id + \"-fragment\"}>\r\n            <label htmlFor={child.id} className=\"createEmployee__label\">\r\n              {child.id}\r\n            </label>\r\n            <input\r\n              className=\"createEmployee__input\"\r\n              type=\"text\"\r\n              id={child.id}\r\n            />\r\n          </React.Fragment>\r\n        );\r\n      case \"DatePicker\":\r\n        return (\r\n          <React.Fragment key={child.id + \"-fragment\"}>\r\n            <label htmlFor={child.id} className=\"createEmployee__label\">\r\n              {child.id}\r\n            </label>\r\n            <DatePicker\r\n              id={child.id}\r\n              selected={child.selected}\r\n              onChange={child.onChange}\r\n              maxDate={child.maxDate}\r\n            />\r\n          </React.Fragment>\r\n        );\r\n\r\n      case \"fieldset\":\r\n        return (\r\n          <fieldset className=\"createEmployee__fieldset\" key={child.id}>\r\n            {generateFormChildren(child.childrenInputs)}\r\n          </fieldset>\r\n        );\r\n      case \"select\":\r\n        return (\r\n          <select id={child.id} key={child.id}>\r\n            {child.options.map((option) => {\r\n              const optionValue =\r\n                typeof option === \"object\" ? option.name : option;\r\n              return <option key={optionValue}>{optionValue}</option>;\r\n            })}\r\n          </select>\r\n        );\r\n\r\n      default:\r\n        console.log(\"unknown child element\");\r\n        return null;\r\n    }\r\n  });\r\n};\r\n\r\nexport default generateFormChildren;\r\n","/**\r\n * @function handleInputsErrorMessage\r\n * @param {Boolean} condition\r\n * @param {Object} input\r\n * @param {String} errorMessage\r\n * @returns {Boolean} - true if input got validated based on the condition given, false if not.\r\n */\r\n\r\nfunction handleInputsErrorMessage(condition, input, errorMessage) {\r\n  let errorMessageElement = document.getElementById(\r\n    `${input.id + \"__error-message\"}`\r\n  );\r\n  // console.log(\"condition\");\r\n  // console.log(condition);\r\n  // console.log(\"input.value\");\r\n  // console.log(input.value);\r\n  // console.log(typeof input.value);\r\n  if (condition) {\r\n    input.setCustomValidity(\"\");\r\n    errorMessageElement?.remove();\r\n    return true;\r\n  }\r\n\r\n  if (!errorMessageElement) {\r\n    errorMessageElement = new DOMParser().parseFromString(\r\n      `<p id=${input.id + \"__error-message\"} className=\"input__error-message\">\r\n          ${errorMessage}\r\n        </p>`,\r\n      \"text/html\"\r\n    ).body.firstChild;\r\n    input.after(errorMessageElement);\r\n\r\n    input.setCustomValidity(errorMessage);\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default handleInputsErrorMessage;\r\n","import handleInputsErrorMessage from \"./handleInputsErrorMessage\";\r\nimport { STATES, DEPARTMENTS } from \"../data\";\r\n\r\n/**\r\n * Get an array of inputs and call handleInputsErrorMessage on each of them with as first arg, the condition to resolve, second the input element and the error message to display if the condition return false.\r\n * @function handleFormValidation\r\n * @param {Array} formInputsArray - full of inputs element\r\n * @returns {Array<Boolean>} - Array storing all condition result. The goal is to get this array to be full of trues to validate the user's inputs\r\n */\r\n\r\nconst handleFormValidation = async (formInputsArray) => {\r\n  return formInputsArray.map((input) => {\r\n    switch (input.id) {\r\n      case \"city\":\r\n      case \"street\":\r\n      case \"last-name\":\r\n      //fall through\r\n      case \"first-name\":\r\n        return handleInputsErrorMessage(\r\n          typeof input.value === \"string\" && input.value.length > 0,\r\n          input,\r\n          \"It must be a string\"\r\n        );\r\n      case \"zip-code\":\r\n        return handleInputsErrorMessage(\r\n          typeof parseInt(input.value) === \"number\" &&\r\n            parseInt(input.value) > 0,\r\n          input,\r\n          \"It must be a Number greater than zero\"\r\n        );\r\n\r\n      case \"department\":\r\n        return handleInputsErrorMessage(\r\n          DEPARTMENTS.includes(input.value),\r\n          input,\r\n          \"Select a valid department option\"\r\n        );\r\n\r\n      case \"state\":\r\n        return handleInputsErrorMessage(\r\n          STATES.filter((state) => state.name === input.value).length > 0,\r\n          input,\r\n          \"Select a valid state option\"\r\n        );\r\n      case \"date-of-birth\":\r\n      case \"start-date\":\r\n        const regularExpression = /^(\\d{2}\\/\\d{2}\\/\\d{4})$/;\r\n        return handleInputsErrorMessage(\r\n          regularExpression.test(input.value),\r\n          input,\r\n          \"It must be a date with mm-dd-yyyy format\"\r\n        );\r\n\r\n      default:\r\n        alert(\"error: unknown input id\");\r\n        console.log(input.id);\r\n        return false;\r\n    }\r\n  });\r\n};\r\nexport default handleFormValidation;\r\n","/**\r\n * Since inputs are stored in form.elements we loop through it to store all inputs in an array. Side note: the submit button is added to this elements list as last that's why we use length - 2 to not add it to our inputs array.\r\n * @function returnArrayOfFormInputs\r\n * @param {Number} length - the last element index you want to store. e.g: 9: <input id=\"randomInput\" />\r\n * @param {Object} elements - findable in document.forms.yourForm.elements\r\n * @param {Array} currentArray - usally empty when we call this function for the first time. We store all inputs inside.\r\n * @returns {Array} - full of inputs elements\r\n */\r\n\r\nconst returnArrayOfFormInputs = async (\r\n  lastElementIndex,\r\n  elements,\r\n  currentArray\r\n) => {\r\n  if (lastElementIndex >= 0) {\r\n    currentArray.push(elements[lastElementIndex]);\r\n    returnArrayOfFormInputs(lastElementIndex - 1, elements, currentArray);\r\n  }\r\n  return currentArray;\r\n};\r\n\r\nexport default returnArrayOfFormInputs;\r\n","import handleFormValidation from \"./handleFormValidation\";\r\nimport returnArrayOfFormInputs from \"./returnArrayOfFormInputs\";\r\n\r\n/**\r\n * Get all inputs in an array, give it to handleFormValidation which returns an array storing all validation results. Then, if all validation are a success, addEmployee to redux state.\r\n * @function handleSubmit\r\n * @param {Object} e\r\n * @param {Object} addEmployee - function that will add to redux state the given object storing all the datas about an employee.\r\n */\r\nconst handleSubmit = async (e, addEmployee) => {\r\n  e.preventDefault();\r\n\r\n  const formLastInputIndex =\r\n    document.forms[\"create-employee\"].elements.length - 2;\r\n  const formElements = document.forms[\"create-employee\"].elements;\r\n\r\n  const formInputsArray = await returnArrayOfFormInputs(\r\n    formLastInputIndex,\r\n    formElements,\r\n    []\r\n  ).then((rawInputsArray) =>\r\n    rawInputsArray.filter(\r\n      (input) => input.tagName === \"SELECT\" || input.tagName === \"INPUT\"\r\n    )\r\n  );\r\n\r\n  try {\r\n    //array.every() don't run on every element in formInputsArray I don't know why. So I use map and check if false is include in the array\r\n    const formValidation = await handleFormValidation(formInputsArray);\r\n\r\n    if (!formValidation.includes(false)) {\r\n      const firstName = document.getElementById(\"first-name\").value;\r\n      const lastName = document.getElementById(\"last-name\").value;\r\n      const street = document.getElementById(\"street\").value;\r\n      const city = document.getElementById(\"city\").value;\r\n      const state = document.getElementById(\"state\").value;\r\n      const zipCode = document.getElementById(\"zip-code\").value;\r\n      const department = document.getElementById(\"department\").value;\r\n      const startDate = document.getElementById(\"start-date\").value;\r\n      const dateOfBirth = document.getElementById(\"date-of-birth\").value;\r\n\r\n      const newEmployee = {\r\n        firstName,\r\n        lastName,\r\n        dateOfBirth,\r\n        startDate,\r\n        street,\r\n        city,\r\n        state,\r\n        zipCode,\r\n        department,\r\n      };\r\n\r\n      addEmployee(newEmployee);\r\n      document.getElementById(\"modal\").setAttribute(\"open\", \"\");\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport default handleSubmit;\r\n","import \"../styles/Modal.css\";\r\n\r\nconst Modal = () => {\r\n  const closeModal = () => {\r\n    document.getElementById(\"modal\").removeAttribute(\"open\");\r\n  };\r\n  return (\r\n    <dialog className=\"Modal\" id=\"modal\">\r\n      <div className=\"Modal__content-wrapper\">\r\n        <span className=\"Modal__message\">Employee Created!</span>\r\n        <button onClick={closeModal} className=\"Modal__close-button\"></button>\r\n      </div>\r\n    </dialog>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import \"../styles/CreateEmployeeForm.css\";\r\nimport { DEPARTMENTS, STATES } from \"../utils/data\";\r\nimport generateFormChildren from \"../utils/functions/generateFormChildren\";\r\nimport handleSubmit from \"../utils/functions/handleSubmit\";\r\n\r\nimport Modal from \"./Modal\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as employeesActions from \"../features/employees/employees.slices\";\r\n\r\nimport subYears from \"date-fns/subYears\";\r\n\r\n/**\r\n * return create employee form. new employee cannot be younger than 18 years old and cannot start working a day that did not arrived yet\r\n * @module CreateEmployeeForm\r\n */\r\n\r\nconst CreateEmployeeForm = () => {\r\n  const [dateOfBirth, setDateOfBirth] = useState(null);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const formChildren = [\r\n    { element: \"input\", type: \"text\", id: \"first-name\" },\r\n    { element: \"input\", type: \"text\", id: \"last-name\" },\r\n    {\r\n      element: \"DatePicker\",\r\n      selected: dateOfBirth,\r\n      onChange: (date) => setDateOfBirth(date),\r\n      maxDate: subYears(new Date(), 18),\r\n      id: \"date-of-birth\",\r\n    },\r\n    {\r\n      element: \"DatePicker\",\r\n      selected: startDate,\r\n      onChange: (date) => setStartDate(date),\r\n      maxDate: new Date(),\r\n      id: \"start-date\",\r\n    },\r\n    {\r\n      element: \"fieldset\",\r\n      id: \"createEmployeeFieldset\",\r\n      childrenInputs: [\r\n        { element: \"input\", type: \"text\", id: \"street\" },\r\n        { element: \"input\", type: \"text\", id: \"city\" },\r\n        { element: \"select\", id: \"state\", options: STATES },\r\n        { element: \"input\", type: \"number\", id: \"zip-code\" },\r\n      ],\r\n    },\r\n    { element: \"select\", id: \"department\", options: DEPARTMENTS },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <form action=\"#\" id=\"create-employee\" className=\"createEmployeeForm\">\r\n        {generateFormChildren(formChildren)}\r\n\r\n        <button\r\n          type=\"submit\"\r\n          onClick={(e) =>\r\n            handleSubmit(e, (newEmployee) =>\r\n              dispatch(employeesActions.addEmployee(newEmployee))\r\n            )\r\n          }\r\n        >\r\n          Save\r\n        </button>\r\n      </form>\r\n      <Modal />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateEmployeeForm;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nimport Header from \"../../Components/Header\";\r\nimport CreateEmployeeForm from \"../../Components/CreateEmployeeForm\";\r\n\r\n/**\r\n * Home page calling components like Header and CreateEmployeeForm\r\n * @module Home\r\n */\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <main className=\"container\">\r\n        <Link to=\"/employee-list\">View Current Employees</Link>\r\n        <h2>Create Employee</h2>\r\n        <CreateEmployeeForm />\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./utils/store\";\n\nimport EmployeeList from \"./Pages/EmployeesList\";\nimport Home from \"./Pages/Home\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/BenjaminLesne_14_07122021\" element={<Home />} />\n          <Route\n            path=\"/BenjaminLesne_14_07122021/employee-list\"\n            element={<EmployeeList />}\n          />\n        </Routes>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}